{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template does a simple setup for all Akto modules. It sets up all modules on a single instance. If you want a scalable and flexible setup, please contact support@akto.io.",
    "Parameters": {
        "SubnetId": {
            "Description": "Select existing subnet for Akto EC2 instance. If you are choosing private subnet, then make sure private subnet is configured to access public internet",
            "Type": "AWS::EC2::Subnet::Id",
            "ConstraintDescription": "must be an existing subnet"
        },   
        "PublicSubnetIds": {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "The list of public subnets in your VPC. Select the 1 public subnet from the same availability zone as SubnetId",
            "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."      
        },     
        "KeyPair": {
            "Description": "Select the key pair to connect to Akto EC2 instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        }
    },
    "Mappings": {
        "RegionMap": {
            "af-south-1": {
                "AMI": "ami-0adee70ff4394e3d5"
            },
            "eu-north-1": {
                "AMI": "ami-04e8b0e36ed3403dc"
            },
            "ap-south-1": {
                "AMI": "ami-09de362f44ba0a166"
            },
            "eu-west-3": {
                "AMI": "ami-0614433a16ab15878"
            },
            "eu-west-2": {
                "AMI": "ami-030770b178fa9d374"
            },
            "eu-south-1": {
                "AMI": "ami-0432f14b68c3e0273"
            },
            "eu-west-1": {
                "AMI": "ami-0bba0a4cb75835f71"
            },
            "ap-northeast-3": {
                "AMI": "ami-0253beba286f3e848"
            },
            "ap-northeast-2": {
                "AMI": "ami-0e1d09d8b7c751816"
            },
            "me-south-1": {
                "AMI": "ami-07a68e42e669daed0"
            },
            "ap-northeast-1": {
                "AMI": "ami-06ce6680729711877"
            },
            "sa-east-1": {
                "AMI": "ami-0656df2cc0dfd150a"
            },
            "ca-central-1": {
                "AMI": "ami-04c12937e87474def"
            },
            "ap-east-1": {
                "AMI": "ami-0b751f901b93720a5"
            },
            "ap-southeast-1": {
                "AMI": "ami-0adf622550366ea53"
            },
            "ap-southeast-2": {
                "AMI": "ami-03b836d87d294e89e"
            },
            "eu-central-1": {
                "AMI": "ami-094c442a8e9a67935"
            },
            "ap-southeast-3": {
                "AMI": "ami-0483d92a8124da6c9"
            },
            "us-east-1": {
                "AMI": "ami-065efef2c739d613b"
            },
            "us-east-2": {
                "AMI": "ami-07251f912d2a831a3"
            },
            "us-west-1": {
                "AMI": "ami-09b2f6d85764ec71b"
            },
            "us-west-2": {
                "AMI": "ami-0d08ef957f0e4722b"
            }
        }
    },        
    "Resources": {
        "GetVpcDetailsLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "DescribeAssetsPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ec2:DescribeVpcs",
                          "ec2:DescribeSubnets"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
        },
        "GetVpcDetailsLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Look up info from a VPC",
                "Handler": "index.handler",
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Role": { "Fn::GetAtt" : ["GetVpcDetailsLambdaRole", "Arn"] },
                "Environment": {
                    "Variables": {
                        "SUBNET_ID": {"Ref": "SubnetId"}
                    }
                },
                "Code": {
                    "ZipFile":  { "Fn::Join": ["", [
                        "var SUBNET_ID = process.env.SUBNET_ID;",
                        "var aws = require('aws-sdk');",
                        "var response = require('cfn-response');",
                        "var ec2 = new aws.EC2();",
                        "exports.handler = async function(event, context) {",
                        "    if (event.RequestType == 'Delete') {",
                        "       await response.send(event, context, 'SUCCESS');",
                        "       return;",
                        "    }",            
                        "    var params = {",
                        "       SubnetIds: [SUBNET_ID] ",
                        "    };",
                        "    var subnets = await ec2.describeSubnets(params).promise().catch(err => {",
                        "       console.error(err);",
                        "    });",
                        "    var vpcId = subnets['Subnets'][0]['VpcId'];",
                        "    var vpcs = await ec2.describeVpcs({VpcIds: [vpcId]}).promise().catch(err => {",
                        "       console.error(err);",
                        "    });",
                        "    await response.send(event, context, 'SUCCESS', {CidrBlock: vpcs['Vpcs'][0]['CidrBlock'], VpcId: vpcId})",
                        "};"
                      ]]}
                }
            }
        },
        "CustomSourceGetVpcDetails": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {"Fn::GetAtt" : ["GetVpcDetailsLambda", "Arn"]}
            }
        },
        "IamInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
               "Path": "/",
               "Roles": [ {
                  "Ref": "LambdaBasicExecutionRole"
               } ]
            }
        },
        "LambdaBasicExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [{
                  "PolicyName": "InvokeLambdaPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": [
                            {"Fn::GetAtt": ["DashboardInstanceRefreshHandler","Arn"]},
                            {"Fn::GetAtt": ["TrafficMirroringInstanceRefreshHandler","Arn"]}
                        ],
                        "Action": "lambda:InvokeFunction"
                      }
                    ]
                  }
              }]
            }
        },                
        "AktoMongoSecurityGroup":{
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "VpcId"]},
                "GroupDescription": "Enable the ports Mongo requires (22, 27017)",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "CidrBlock"]}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 27017,
                        "ToPort": 27017,
                        "CidrIp": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "CidrBlock"]}
                    }
                ],
                "SecurityGroupEgress": [
                    
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "01a51caa-b901-42f9-bd49-62222c5367a1"
                }
            }
        },

        "AktoMongoInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": "m5.xlarge",
                "ImageId": {
                    "Fn::FindInMap" : [ 
                        "RegionMap", 
                        { 
                          "Ref" : "AWS::Region" 
                        }, 
                        "AMI"
                      ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Akto Mongo instance"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "50"
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "NetworkInterfaces": [
                    { 
                        "SubnetId": {"Ref": "SubnetId"},
                        "AssociatePublicIpAddress": "false",
                        "DeviceIndex": "0",
                        "GroupSet": [{ "Ref" : "AktoMongoSecurityGroup" }]
                    }
                ],        
                "UserData": { "Fn::Base64": { "Fn::Join": ["\n", [
                    "#!/bin/bash -xe",
                    "touch /tmp/hello.txt",
                    "touch ~/hello.txt",
                    "sudo yum update -y",
                    "sudo yum install -y python python-setuptools",
                    "sudo yum install -y docker",
                    "sudo dockerd&",
                    "sudo mkdir -p /opt/aws/bin",
                    "sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                    "sudo python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz",
                    "export COMPOSE_FILE=docker-compose-mongo.yml",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation_2/cf-deploy-akto' > cf-deploy-akto",
                    "sudo chmod 700 cf-deploy-akto",
                    "./cf-deploy-akto < <(echo 'test')",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation_2/cf-deploy-akto-start' > cf-deploy-akto-start",
                    "sudo chmod 700 cf-deploy-akto-start",
                    "./cf-deploy-akto-start < <(echo 'test')",
                    
                    {"Fn::Join": ["", 
                    ["sudo /opt/aws/bin/cfn-signal -s true",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource AktoMongoInstance",
                    "         --region ", { "Ref" : "AWS::Region" }]]}
                    ]]
                }}
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c3cbe581-37f1-40cb-a4fa-ab8c7f318cd0"
                }
            }
        },

        "AktoSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "VpcId"]},
                "GroupDescription": "Enable the ports Akto requires (22, 4789, 8000, 9092)",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "CidrBlock"]}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9092,
                        "ToPort": 9092,
                        "CidrIp": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "CidrBlock"]}
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": 4789,
                        "ToPort": 4789,
                        "CidrIp": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "CidrBlock"]}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8000,
                        "ToPort": 8000,
                        "CidrIp": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "CidrBlock"]}
                    }
                ],
                "SecurityGroupEgress": [
                    
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "01a51caa-b901-42f9-bd49-62222c5367a1"
                }
            }
        },

        "AktoASGLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": ["AktoMongoInstance", "AktoNLB"],
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap" : [ 
                        "RegionMap", 
                        { 
                          "Ref" : "AWS::Region" 
                        }, 
                        "AMI"
                      ]
                },
                "InstanceType": "m5.xlarge",
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "LaunchConfigurationName": "AktoASGLaunchConfiguration",
                "AssociatePublicIpAddress": "false",
                "IamInstanceProfile": {"Ref": "IamInstanceProfile"},
                "SecurityGroups": [{ "Ref" : "AktoSecurityGroup" }],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "50"
                        }
                    }
                ],
                "UserData": { "Fn::Base64": { "Fn::Join": ["\n", [
                    "#!/bin/bash -xe",
                    { "Fn::Sub": "export AKTO_MONGO_CONN='${AktoMongoInstance.PrivateIp}'" },
                    { "Fn::Sub": "export AKTO_KAFKA_IP='${AktoNLB.DNSName}'" },
                    "touch /tmp/hello.txt",
                    "touch ~/hello.txt",
                    "sudo yum update -y",
                    "sudo yum install -y python python-setuptools",
                    "sudo yum install -y docker",
                    "sudo dockerd&",
                    "sudo mkdir -p /opt/aws/bin",
                    "export COMPOSE_FILE=docker-compose-runtime.yml",
                    "sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                    "sudo python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation_2/cf-deploy-akto' > cf-deploy-akto",
                    "sudo chmod 700 cf-deploy-akto",
                    "./cf-deploy-akto < <(echo 'test')",
                    "sudo echo >> ~/akto/infra/docker-runtime.env",
                    "sudo echo AKTO_MONGO_CONN=mongodb://$AKTO_MONGO_CONN:27017/admini >> ~/akto/infra/docker-runtime.env",
                    "sudo echo AKTO_KAFKA_IP=$AKTO_KAFKA_IP >> ~/akto/infra/.env",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation_2/cf-deploy-akto-start' > cf-deploy-akto-start",
                    "sudo chmod 700 cf-deploy-akto-start",
                    "./cf-deploy-akto-start < <(echo 'test')"
                    
                    ]]
                }}
            }
        },
        "AktoAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": "AktoAutoScalingGroup",
                "VPCZoneIdentifier": [{"Ref": "SubnetId"}],
                "LaunchConfigurationName": {"Ref": "AktoASGLaunchConfiguration"},
                "TargetGroupARNs": [{"Ref": "AktoTrafficMirroringTargetGroup"}, {"Ref": "AktoKafkaTargetGroup"}],
                "MaxSize": "10",
                "MinSize": "1"   
            }
        },
        "AktoDashboardASGLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": ["AktoMongoInstance", "AktoNLB"],
            "Properties": {
                "InstanceType": "m5.xlarge",
                "ImageId": {
                    "Fn::FindInMap" : [ 
                        "RegionMap", 
                        { 
                          "Ref" : "AWS::Region" 
                        }, 
                        "AMI"
                      ]
                },
                "AssociatePublicIpAddress": "false",
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "IamInstanceProfile": {"Ref": "IamInstanceProfile"},
                "SecurityGroups": [{ "Ref" : "AktoDashboardSecurityGroup" }],                
                "UserData": { "Fn::Base64": { "Fn::Join": ["\n", [
                    "#!/bin/bash -xe",
                    "touch /tmp/hello.txt",
                    "touch ~/hello.txt",
                    { "Fn::Sub": "export AKTO_MONGO_CONN='${AktoMongoInstance.PrivateIp}'" },
                    { "Fn::Sub": "export AKTO_KAFKA_BROKER_URL='${AktoNLB.DNSName}'" },
                    "sudo yum update -y",
                    "sudo yum install -y python python-setuptools",
                    "sudo yum install -y docker",
                    "sudo dockerd&",
                    "sudo mkdir -p /opt/aws/bin",
                    "export COMPOSE_FILE=docker-compose-dashboard.yml",
                    "sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                    "sudo python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation_2/cf-deploy-akto' > cf-deploy-akto",
                    "sudo chmod 700 cf-deploy-akto",
                    "./cf-deploy-akto < <(echo 'test')",
                    "sudo echo >> ~/akto/infra/docker-dashboard.env",
                    "sudo echo AKTO_MONGO_CONN=mongodb://$AKTO_MONGO_CONN:27017/admini >> ~/akto/infra/docker-dashboard.env",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation_2/cf-deploy-akto-start' > cf-deploy-akto-start",
                    "sudo chmod 700 cf-deploy-akto-start",
                    "./cf-deploy-akto-start < <(echo 'test')"
                    ]]
                }}
            }
        },
        "AktoDashboardAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": "AktoDashboardAutoScalingGroup",
                "VPCZoneIdentifier": [{"Ref": "SubnetId"}],
                "LaunchConfigurationName": {"Ref": "AktoDashboardASGLaunchConfiguration"},
                "TargetGroupARNs": [{"Ref": "AktoDashboardTargetGroup2"}],
                "MaxSize": "10",
                "MinSize": "1"   
            }
        },
        "AktoTargetTrackingNetworkPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyType": "TargetTrackingScaling",
                "AutoScalingGroupName": {"Ref": "AktoAutoScalingGroup"},
                "EstimatedInstanceWarmup": 30,
                "TargetTrackingConfiguration":{
                    "PredefinedMetricSpecification" : {
                        "PredefinedMetricType": "ASGAverageNetworkIn"
                    },
                    "TargetValue" : 200000000
                }
            }
        },
        "AktoDashboardTargetTrackingNetworkPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyType": "TargetTrackingScaling",
                "AutoScalingGroupName": {"Ref": "AktoDashboardAutoScalingGroup"},
                "EstimatedInstanceWarmup": 30,
                "TargetTrackingConfiguration":{
                    "PredefinedMetricSpecification" : {
                        "PredefinedMetricType": "ASGAverageCPUUtilization"
                    },
                    "TargetValue" : 60
                }
            }
        },        
        "AktoDashboardSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "VpcId"]},
                "GroupDescription": "Enable the ports Akto requires (22, 8080)",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "CidrBlock"]}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8080,
                        "ToPort": 8080,
                        "CidrIp": {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "CidrBlock"]}
                    }
                ],
                "SecurityGroupEgress": [
                    
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "01a51caa-b901-42f9-bd49-62222c5367a1"
                }
            }
        },
        "AktoNLB" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties"  :{
              "Type"  :"network",
              "Scheme": "internal",
              "IpAddressType": "ipv4",
              "Subnets" : [{"Ref" : "SubnetId"}],
              "Name" : "AktoNLB",
              "LoadBalancerAttributes": [
                {
                    "Key": "load_balancing.cross_zone.enabled",
                    "Value": "true"
                }
              ]
            }
        },
        "AktoLBDashboard" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties"  :{
              "Type"  :"application",
              "IpAddressType": "ipv4",
              "Subnets" : {"Ref" : "PublicSubnetIds"},
              "Name" : "AktoLBDashboard"
            }
        },
        "AktoTrafficMirroringTargetGroup"  :{
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Port" : "4789",
                "Protocol" : "UDP",
                "HealthCheckEnabled" : "true",
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckPath" : "/metrics",
                "HealthCheckPort" : "8000",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : 6,
                "HealthyThresholdCount" : 2,
                "UnhealthyThresholdCount" : 2,
                "TargetType" : "instance",
                "VpcId" : {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "VpcId"]},
                "Targets" : [],
                "Name" : "AktoTrafficMirroringTargetGroup"
            }
        },
        "AktoTrafficMirroringListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : {"Ref" : "AktoNLB"},
                "Port" : "4789",
                "Protocol" : "UDP",
                "DefaultActions" : [
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : {"Ref" : "AktoTrafficMirroringTargetGroup"}
                    }
                ]   
            }
        },
        "AktoDashboardTargetGroup2"  :{
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Port" : "8080",
                "Protocol" : "HTTP",
                "HealthCheckEnabled" : "true",
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckPath" : "/metrics",
                "HealthCheckPort" : "8080",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : 6,
                "HealthyThresholdCount" : 2,
                "UnhealthyThresholdCount" : 2,
        
                "TargetType" : "instance",
                "VpcId" : {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "VpcId"]},
                "Targets" : [],
                "Name" : "AktoDashboardTargetGroup2"
            }
        },
        "AktoDashboardListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : {"Ref" : "AktoLBDashboard"},
                "Port" : "80",
                "Protocol" : "HTTP",
                "DefaultActions" : [
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : {"Ref" : "AktoDashboardTargetGroup2"}
                    }
                ]   
            }
        },
        "AktoKafkaTargetGroup"  :{
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Port" : "9092",
                "Protocol" : "TCP",
                "TargetType" : "instance",
                "HealthCheckEnabled" : "true",
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckPath" : "/metrics",
                "HealthCheckPort" : "8000",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : 6,
                "HealthyThresholdCount" : 2,
                "UnhealthyThresholdCount" : 2,
                "VpcId" : {"Fn::GetAtt": ["CustomSourceGetVpcDetails", "VpcId"]},
                "Targets" : [],
                "Name" : "AktoKafkaTargetGroup"
            }
        },
        "AktoKafkaListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : {"Ref" : "AktoNLB"},
                "Port" : "9092",
                "Protocol" : "TCP",
                "DefaultActions" : [
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : {"Ref" : "AktoKafkaTargetGroup"}
                    }
                ]   
            }
        },
        "DashboardInstanceRefreshHandler": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "FunctionName": "DashboardInstanceRefreshHandler",
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Role": { "Fn::GetAtt" : ["InstanceRefreshHandlerLambdaRole", "Arn"] },
                "Code": {
                    "ZipFile":  { "Fn::Join": ["", [
                        "var aws = require('aws-sdk');",
                        "var autoscaling = new aws.AutoScaling();",
                        "exports.handler = function(event, context) {",
                        "    var params = {",
                        "    AutoScalingGroupName: 'AktoDashboardAutoScalingGroup', ",
                        "       Preferences: {",
                        "        InstanceWarmup: 200, ",
                        "        MinHealthyPercentage: 0",
                        "       }",
                        "      };",
                        "      autoscaling.startInstanceRefresh(params, function(err, data) {",
                        "           if(err) {",
                        "           }",
                        "           else {",
                        "           }",
                        "      })",
                        "      ",
                        "};"
                      ]]}
                }
            }
        },
        "TrafficMirroringInstanceRefreshHandler": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "FunctionName": "TrafficMirroringInstanceRefreshHandler",
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Role": { "Fn::GetAtt" : ["InstanceRefreshHandlerLambdaRole", "Arn"] },
                "Code": {
                    "ZipFile":  { "Fn::Join": ["", [
                        "var aws = require('aws-sdk');",
                        "var autoscaling = new aws.AutoScaling();",
                        "exports.handler = function(event, context) {",
                        "    var params = {",
                        "    AutoScalingGroupName: 'AktoAutoScalingGroup', ",
                        "       Preferences: {",
                        "        InstanceWarmup: 200, ",
                        "        MinHealthyPercentage: 0",
                        "       }",
                        "      };",
                        "      autoscaling.startInstanceRefresh(params, function(err, data) {",
                        "           if(err) { console.log(err)",
                        "           }",
                        "           else { console.log(data)",
                        "           }",
                        "      })",
                        "      ",
                        "};"
                      ]]}
                }
            }
        },        
        "InstanceRefreshHandlerLambdaRole" : {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/service-role/",
              "Policies": [
                {
                  "PolicyName": "lambdaExecution-DashboardInstanceRefreshHandler",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "autoscaling:StartInstanceRefresh",
                          "autoscaling:Describe*",
                          "autoscaling:UpdateAutoScalingGroup",
                          "ec2:CreateLaunchTemplateVersion",
                          "ec2:DescribeLaunchTemplates",
                          "ec2:RunInstances"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          }
    },
    "Outputs": {
        "AktoNLB" : {
            "Value"  : {"Ref" : "AktoNLB"},
            "Description" : "Arn of Akto Network Load Balancer"
        },
        "AktoLBDashboard": {
            "Value"  : {"Ref" : "AktoLBDashboard"},
            "Description" : "Arn of Akto Dashboard LB"
        }
    }    
}
