{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template does a simple setup for all Akto modules. It sets up all modules on a single instance. If you want a scalable and flexible setup, please contact support@akto.io.",
    "Parameters": {
        "AktoAZ": {
            "Description": "Select AZ of the subnet id you mentioned.",
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "ConstraintDescription": "must be az of the subnet"
        },   
        "VPC": {
            "Description": "The VPC where Akto will run",
            "Type": "AWS::EC2::VPC::Id"
        },
        "VpcCIDR": {
            "Description": "Please enter the IP range (CIDR notation) for this VPC",
            "Type": "String",
            "Default": "0.0.0.0/0"
        },    
        "SubnetId": {
            "Description": "Select existing subnet for Akto EC2 instance. If you are choosing private subnet, then make sure private subnet is configured to access public internet",
            "Type": "AWS::EC2::Subnet::Id",
            "ConstraintDescription": "must be an existing subnet"
        },        
        "KeyPair": {
            "Description": "Select the key pair to connect to Akto EC2 instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "AktoInstanceType": {
            "Description": "Instance type to be allocated to Akto",
            "ConstraintDescription": "Must be a valid EC2 instance type. Preferably, choose Intel series (M5 or C6I)",
            "Type": "String",
            "Default": "m5.xlarge"
        },
        "LatestAmiId": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        },
        "AssociatePublicIpAddress": {
            "Description": "Set this to false to restrict the access to the dashboard from VPN only. If set to false, the instance will NOT have a public IP.",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "01a51caa-b901-42f9-bd49-62222c5367a1": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -133.5,
                    "y": -25
                },
                "z": 0,
                "embeds": []
            },
            "c3cbe581-37f1-40cb-a4fa-ab8c7f318cd0": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -3.5,
                    "y": -9.666666666666666
                },
                "z": 0,
                "embeds": [],
                "isassociatedwith": [
                    "01a51caa-b901-42f9-bd49-62222c5367a1"
                ]
            }
        }
    },
    "Resources": {
        "AktoMongoSecurityGroup":{
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Enable the ports Mongo requires (22, 27017)",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "VpcCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 27017,
                        "ToPort": 27017,
                        "CidrIp": {
                            "Ref": "VpcCIDR"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "01a51caa-b901-42f9-bd49-62222c5367a1"
                }
            }
        },

        "AktoMongoInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "AktoInstanceType"
                },
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Akto Mongo instance"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "50"
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "NetworkInterfaces": [
                    { 
                        "SubnetId": {"Ref": "SubnetId"},
                        "AssociatePublicIpAddress": {
                            "Ref": "AssociatePublicIpAddress"
                        },
                        "DeviceIndex": "0",
                        "GroupSet": [{ "Ref" : "AktoMongoSecurityGroup" }]
                    }
                ],        
                "UserData": { "Fn::Base64": { "Fn::Join": ["\n", [
                    "#!/bin/bash -xe",
                    "touch /tmp/hello.txt",
                    "touch ~/hello.txt",
                    "sudo yum update -y",
                    "sudo yum install -y python python-setuptools",
                    "sudo yum install -y docker",
                    "sudo dockerd&",
                    "sudo mkdir -p /opt/aws/bin",
                    "sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                    "sudo python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz",
                    "export COMPOSE_FILE=docker-compose-mongo.yml",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation/cf-deploy-akto' > cf-deploy-akto",
                    "sudo chmod 700 cf-deploy-akto",
                    "./cf-deploy-akto < <(echo 'test')",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation/cf-deploy-akto-start' > cf-deploy-akto-start",
                    "sudo chmod 700 cf-deploy-akto-start",
                    "./cf-deploy-akto-start < <(echo 'test')",
                    
                    {"Fn::Join": ["", 
                    ["sudo /opt/aws/bin/cfn-signal -s true",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource AktoMongoInstance",
                    "         --region ", { "Ref" : "AWS::Region" }]]}
                    ]]
                }}
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c3cbe581-37f1-40cb-a4fa-ab8c7f318cd0"
                }
            }
        },

        "AktoSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Enable the ports Akto requires (22, 4789, 8000, 9092)",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "VpcCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9092,
                        "ToPort": 9092,
                        "CidrIp": {
                            "Ref": "VpcCIDR"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": 4789,
                        "ToPort": 4789,
                        "CidrIp": {
                            "Ref": "VpcCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8000,
                        "ToPort": 8000,
                        "CidrIp": {
                            "Ref": "VpcCIDR"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "01a51caa-b901-42f9-bd49-62222c5367a1"
                }
            }
        },

        "AktoASGLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": ["AktoMongoInstance", "AktoNLB"],
            "Properties": {
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "InstanceType": {
                    "Ref": "AktoInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "LaunchConfigurationName": "AktoLaunchConfiguration",
                "AssociatePublicIpAddress": {
                    "Ref": "AssociatePublicIpAddress"
                },
                "SecurityGroups": [{ "Ref" : "AktoSecurityGroup" }],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "50"
                        }
                    }
                ],
                "UserData": { "Fn::Base64": { "Fn::Join": ["\n", [
                    "#!/bin/bash -xe",
                    { "Fn::Sub": "export AKTO_MONGO_CONN='${AktoMongoInstance.PrivateIp}'" },
                    { "Fn::Sub": "export AKTO_KAFKA_IP='${AktoNLB.DNSName}'" },
                    "touch /tmp/hello.txt",
                    "touch ~/hello.txt",
                    "sudo yum update -y",
                    "sudo yum install -y python python-setuptools",
                    "sudo yum install -y docker",
                    "sudo dockerd&",
                    "sudo mkdir -p /opt/aws/bin",
                    "export COMPOSE_FILE=docker-compose-runtime.yml",
                    "sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                    "sudo python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation/cf-deploy-akto' > cf-deploy-akto",
                    "sudo chmod 700 cf-deploy-akto",
                    "./cf-deploy-akto < <(echo 'test')",
                    "sudo echo >> ~/akto/infra/docker-runtime.env",
                    "sudo echo AKTO_MONGO_CONN=mongodb://$AKTO_MONGO_CONN:27017/admini >> ~/akto/infra/docker-runtime.env",
                    "sudo echo AKTO_KAFKA_IP=$AKTO_KAFKA_IP:9092 >> ~/akto/infra/.env",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation/cf-deploy-akto-start' > cf-deploy-akto-start",
                    "sudo chmod 700 cf-deploy-akto-start",
                    "./cf-deploy-akto-start < <(echo 'test')"
                    
                    ]]
                }}
            }
        },
        "AktoAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [{"Ref": "AZ"}],
                "AutoScalingGroupName": "AktoAutoScalingGroup",
                "VPCZoneIdentifier": [{"Ref": "SubnetId"}],
                "LaunchConfigurationName": {"Ref": "AktoASGLaunchConfiguration"},
                "TargetGroupARNs": [{"Ref": "AktoTrafficMirroringTargetGroup"}, {"Ref": "AktoKafkaTargetGroup"}],
                "MaxSize": "10",
                "MinSize": "1"   
            }
        },
        "AktoTargetTrackingNetworkPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyType": "TargetTrackingScaling",
                "AutoScalingGroupName": {"Ref": "AktoAutoScalingGroup"},
                "EstimatedInstanceWarmup": 30,
                "TargetTrackingConfiguration":{
                    "PredefinedMetricSpecification" : {
                        "PredefinedMetricType": "ASGAverageNetworkIn"
                    },
                    "TargetValue" : 200000000
                }
            }
        },
        
        "AktoDashboardSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Enable the ports Akto requires (22, 8080)",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "VpcCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8080,
                        "ToPort": 8080,
                        "CidrIp": {
                            "Ref": "VpcCIDR"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "01a51caa-b901-42f9-bd49-62222c5367a1"
                }
            }
        },
        "AktoDashboardInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": ["AktoMongoInstance", "AktoNLB"],
            "Properties": {
                "InstanceType": {
                    "Ref": "AktoInstanceType"
                },
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Akto Dashboard instance"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "50"
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "NetworkInterfaces": [
                    { 
                        "SubnetId": {"Ref": "SubnetId"},
                        "AssociatePublicIpAddress": {
                            "Ref": "AssociatePublicIpAddress"
                        },
                        "DeviceIndex": "0",
                        "GroupSet": [{ "Ref" : "AktoDashboardSecurityGroup" }]
                    }
                ],        
                "UserData": { "Fn::Base64": { "Fn::Join": ["\n", [
                    "#!/bin/bash -xe",
                    "touch /tmp/hello.txt",
                    "touch ~/hello.txt",
                    { "Fn::Sub": "export AKTO_MONGO_CONN='${AktoMongoInstance.PrivateIp}'" },
                    { "Fn::Sub": "export AKTO_KAFKA_BROKER_URL='${AktoNLB.DNSName}'" },
                    "sudo yum update -y",
                    "sudo yum install -y python python-setuptools",
                    "sudo yum install -y docker",
                    "sudo dockerd&",
                    "sudo mkdir -p /opt/aws/bin",
                    "export COMPOSE_FILE=docker-compose-dashboard.yml",
                    "sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                    "sudo python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation/cf-deploy-akto' > cf-deploy-akto",
                    "sudo chmod 700 cf-deploy-akto",
                    "./cf-deploy-akto < <(echo 'test')",
                    "sudo echo >> ~/akto/infra/docker-dashboard.env",
                    "sudo echo AKTO_MONGO_CONN=mongodb://$AKTO_MONGO_CONN:27017/admini >> ~/akto/infra/docker-dashboard.env",
                    "sudo echo AKTO_KAFKA_BROKER_URL=$AKTO_KAFKA_BROKER_URL:9092 >> ~/akto/infra/docker-dashboard.env",
                    "curl -fsSL 'https://raw.githubusercontent.com/akto-api-security/infra/feature/segregation/cf-deploy-akto-start' > cf-deploy-akto-start",
                    "sudo chmod 700 cf-deploy-akto-start",
                    "./cf-deploy-akto-start < <(echo 'test')",
                    
                    {"Fn::Join": ["", 
                    ["sudo /opt/aws/bin/cfn-signal -s true",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource AktoDashboardInstance",
                    "         --region ", { "Ref" : "AWS::Region" }]]}
                    ]]
                }}
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c3cbe581-37f1-40cb-a4fa-ab8c7f318cd0"
                }
            }
        },
        "AktoNLB" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties"  :{
              "Type"  :"network",
              "Scheme": "internal",
              "IpAddressType": "ipv4",
              "Subnets" : [{"Ref" : "SubnetId"}],
              "Name" : "AktoNLB",
              "LoadBalancerAttributes": [
                {
                    "Key": "load_balancing.cross_zone.enabled",
                    "Value": "true"
                }
              ]
            }
        },
        "AktoTrafficMirroringTargetGroup"  :{
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Port" : "4789",
                "Protocol" : "UDP",
                "HealthCheckEnabled" : "true",
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckPath" : "/metrics",
                "HealthCheckPort" : "8000",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : 6,
                "HealthyThresholdCount" : 2,
                "UnhealthyThresholdCount" : 2,
                "TargetType" : "instance",
                "VpcId" : {"Ref":"VPC"},
                "Targets" : [],
                "Name" : "AktoTrafficMirroringTargetGroup"
            }
        },
        "AktoTrafficMirroringListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : {"Ref" : "AktoNLB"},
                "Port" : "4789",
                "Protocol" : "UDP",
                "DefaultActions" : [
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : {"Ref" : "AktoTrafficMirroringTargetGroup"}
                    }
                ]   
            }
        },
        "AktoDashboardTargetGroup"  :{
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Port" : "8080",
                "Protocol" : "TCP",
                "HealthCheckEnabled" : "true",
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckPath" : "/metrics",
                "HealthCheckPort" : "8080",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : 6,
                "HealthyThresholdCount" : 2,
                "UnhealthyThresholdCount" : 2,
        
                "TargetType" : "instance",
                "VpcId" : {"Ref":"VPC"},
                "Targets" : [{
                    "Id" : { "Ref":"AktoDashboardInstance"}
                    }],
                "Name" : "AktoDashboardTargetGroup"
            }
        },
        "AktoDashboardListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : {"Ref" : "AktoNLB"},
                "Port" : "80",
                "Protocol" : "TCP",
                "DefaultActions" : [
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : {"Ref" : "AktoDashboardTargetGroup"}
                    }
                ]   
            }
        },
        "AktoKafkaTargetGroup"  :{
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Port" : "9092",
                "Protocol" : "TCP",
                "TargetType" : "instance",
                "HealthCheckEnabled" : "true",
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckPath" : "/metrics",
                "HealthCheckPort" : "8000",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : 6,
                "HealthyThresholdCount" : 2,
                "UnhealthyThresholdCount" : 2,
                "VpcId" : {"Ref":"VPC"},
                "Targets" : [],
                "Name" : "AktoKafkaTargetGroup"
            }
        },
        "AktoKafkaListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : {"Ref" : "AktoNLB"},
                "Port" : "9092",
                "Protocol" : "TCP",
                "DefaultActions" : [
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : {"Ref" : "AktoKafkaTargetGroup"}
                    }
                ]   
            }
        }
    },
    "Outputs": {
        "AktoNLB" : {
            "Value"  : {"Ref" : "AktoNLB"},
            "Description" : "Arn of Akto Network Load Balancer"
        }
    }    
}
