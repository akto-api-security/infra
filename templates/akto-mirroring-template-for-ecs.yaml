AWSTemplateFormatVersion: 2010-09-09
Description: AWS cloudFormation template to configure traffic mirroring sessions
Parameters:
  SourceECSCluster:
    Description: 'ECS Cluster name ( eg: cluster1 )'
    Type: String
    Default: ''
  InstancesPerSource:
    Description: Number of instances to be mirrored per resource group (Load Balancer/Target Group/ECSCluster. (To mirror traffic from all instances, enter any number less than 1. AWS currently limits traffic mirroring to 10 instances. If you want more source instances, please email to support@akto.io.
    Type: Number
    Default: 1  
  TargetENI:
    Description: ENI id of target interface
    Type: String
    Default: ''
  TargetLB:
    Description: Target Loadbalancer ARN
    Type: String
    Default: ''
  MirroringSessionNumber:
    Description: Unique mirroring session number to be used for mirroring session
    Type: String
    Default: '10'
Conditions:

  CreateMirroringSessionForECS: !Not
    - !Equals
      - !Ref SourceECSCluster
      - ''

  isTargetNLB: !Not
    - !Equals
      - !Ref TargetLB
      - ''
Resources:
  TrafficMirrorTarget:
    Type: 'AWS::EC2::TrafficMirrorTarget'
    Properties:
      Description: Traffic Mirror target set to network interface of Akto EC2 instance
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-'
              - Target
        - Key: Deployment
          Value: Akto-CloudFormation
      NetworkInterfaceId: !If
        - isTargetNLB
        - !Ref AWS::NoValue
        - !Ref TargetENI
      NetworkLoadBalancerArn: !If
        - isTargetNLB
        - !Ref TargetLB
        - !Ref AWS::NoValue

  ECSTrafficMirrorFilter:
    Type: 'AWS::EC2::TrafficMirrorFilter'
    Condition: CreateMirroringSessionForECS
    Properties:
      Description: Traffic mirror filter for ECS cluster
      NetworkServices:
        - amazon-dns
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-'
              - ECS-Filter
        - Key: Deployment
          Value: Akto-CloudFormation
  TrafficMirrorFilterRuleIngress:
    Type: 'AWS::EC2::TrafficMirrorFilterRule'
    Condition: CreateMirroringSessionForECS
    Properties:
      Description: traffic mirror filter rule
      TrafficMirrorFilterId: !Ref ECSTrafficMirrorFilter
      TrafficDirection: ingress
      RuleNumber: 10
      DestinationCidrBlock: 0.0.0.0/0
      SourceCidrBlock: 0.0.0.0/0
      RuleAction: accept
      Protocol: 6
  TrafficMirrorFilterRuleEgress:
    Type: 'AWS::EC2::TrafficMirrorFilterRule'
    Condition: CreateMirroringSessionForECS
    Properties:
      Description: traffic mirror filter rule
      TrafficMirrorFilterId: !Ref ECSTrafficMirrorFilter
      TrafficDirection: egress
      RuleNumber: 10
      DestinationCidrBlock: 0.0.0.0/0
      SourceCidrBlock: 0.0.0.0/0
      RuleAction: accept
      Protocol: 6
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: CreateMirroringSessionForECS
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CreateMirrorSession}'
      RetentionInDays: 7
  LambdaBasicExecutionRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateMirroringSessionForECS
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LBCreateTrafficMirrorSession
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeTrafficMirrorSessions'
                  - 'ec2:DescribeInstances'
                  - 'ecs:DescribeClusters'
                  - 'ecs:DescribeTasks'
                  - 'ecs:ListTasks'
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                  - 'elasticloadbalancing:DescribeTargetGroups'
                  - 'elasticloadbalancing:DescribeTargetHealth'
                  - 'ec2:DescribeTrafficMirrorFilters'
                  - 'ec2:DeleteTrafficMirrorFilterRule'
                  - 'ec2:CreateTrafficMirrorFilterRule'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:CreateTrafficMirrorSession'
                Resource:
                  - 'arn:aws:ec2:*:*:traffic-mirror-session/*'
                  - 'arn:aws:ec2:*:*:network-interface/*'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:*:*:traffic-mirror-target/'
                      - !Ref TrafficMirrorTarget
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:*:*:traffic-mirror-filter/*'
              - Effect: Allow
                Action:
                  - 'ec2:DeleteTrafficMirrorSession'
                Resource:
                  - 'arn:aws:ec2:*:*:traffic-mirror-session/*'
  LambdaLogPermissions:
    Type: 'AWS::IAM::Policy'
    Condition: CreateMirroringSessionForECS
    Properties:
      Roles:
        - !Ref LambdaBasicExecutionRole
      PolicyName: !Sub '${AWS::Region}-LambdaLogGroup'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CreateMirrorSession}
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CreateMirrorSession}:*
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CreateMirrorSession}:*:*
  CustomSourceENIs:
    Type: 'AWS::CloudFormation::CustomResource'
    Condition: CreateMirroringSessionForECS
    Properties:
      ServiceToken: !GetAtt
        - CreateMirrorSession
        - Arn
      SourceECS: !Ref SourceECSCluster
      MirrorTarget: !Ref TrafficMirrorTarget
      SampleSize: !Ref InstancesPerSource
      TargetENI: !Ref TargetENI
      ECSMirrorFilter: !If
        - CreateMirroringSessionForECS
        - !Ref ECSTrafficMirrorFilter
        - ''
    DependsOn: LambdaLogGroup
  CreateMirrorSession:
    Type: 'AWS::Lambda::Function'
    Condition: CreateMirroringSessionForECS
    Properties:
      Runtime: nodejs12.x
      Timeout: 60
      Role: !GetAtt
        - LambdaBasicExecutionRole
        - Arn
      Handler: CreateMirroringSession/index.ECShandler
      Environment:
        Variables:
          ECS_NAME: !Ref SourceECSCluster
          TRAFFIC_MIRROR_TARGET_ID: !Ref TrafficMirrorTarget
          ECS_TRAFFIC_MIRROR_FILTER_ID: !If
            - CreateMirroringSessionForECS
            - !Ref ECSTrafficMirrorFilter
            - ''
          TRAFFIC_MIRROR_SESSION_NUMBER: !Ref MirroringSessionNumber
          SAMPLE_SIZE: !Ref InstancesPerSource
          TARGET_ENI: !Ref TargetENI
          TARGET_LB: !Ref TargetLB
      Code:
        S3Bucket: aktotestbucket
        S3Key: CreateMirroringSession.zip
      Description: Auto create mirroring configuration
      TracingConfig:
        Mode: Active

  ECSEventsRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateMirroringSessionForECS
    Properties:
      Description: Generate an event for ECS task state change
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-'
          - ECSEventRule
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          clusterArn:
            - !Join
              - ''
              - - 'arn:aws:ecs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':cluster/'
                - !Ref SourceECSCluster
          desiredStatus:
            - RUNNING
          lastStatus:
            - RUNNING
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - CreateMirrorSession
            - Arn
          Id: !Ref CreateMirrorSession

  ECSEventPermission:
    Type: 'AWS::Lambda::Permission'
    Condition: CreateMirroringSessionForECS
    Properties:
      FunctionName: !GetAtt
        - CreateMirrorSession
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt
        - ECSEventsRule
        - Arn

  LambdaVPCAccessRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateMirroringSessionForECS
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaBasicAccessVPCPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeInstances'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:AttachNetworkInterface'
                Resource: '*'
  LambdaSecurityGroupVPC:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !GetAtt 
        - CustomSourceENIs
        - VpcId
      GroupDescription: "Security group is required to create a lambda inside a VPC"
      
      SecurityGroupEgress: 
        - IpProtocol: "tcp"
          FromPort: 9092
          ToPort: 9092
          CidrIp: "0.0.0.0/0"
      
  SaveCollectionNames:
    Type: 'AWS::Lambda::Function'
    Condition: CreateMirroringSessionForECS
    Properties:
      Runtime: nodejs12.x
      Timeout: 60
      Role: !GetAtt
        - LambdaVPCAccessRole
        - Arn
      Handler: nodejs/index.handler
      VpcConfig:
        SecurityGroupIds: 
          - !GetAtt 
            - LambdaSecurityGroupVPC 
            - GroupId
        SubnetIds: !GetAtt 
          - CustomSourceENIs
          - SubnetId
      Environment:
        Variables:
          PRIVATE_IP: !GetAtt
            - CustomSourceENIs
            - kafkaIp
          SUCCESS_ENIS: !GetAtt
            - CustomSourceENIs
            - successEnis
      Code:
        S3Bucket: !Sub 'akto-setup-${AWS::Region}'
        S3Key: 'templates/mirroring-collections.zip'
      Description: Send collection name to id mapping to Akto modules
      TracingConfig:
        Mode: Active

  LambdaLogGroupVPC:
    Type: 'AWS::Logs::LogGroup'
    Condition: CreateMirroringSessionForECS
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SaveCollectionNames}'
      RetentionInDays: 7

  LambdaLogPermissionsVPC:
    Type: 'AWS::IAM::Policy'
    Condition: CreateMirroringSessionForECS
    Properties:
      Roles:
        - !Ref LambdaVPCAccessRole
      PolicyName: !Sub '${AWS::Region}-LambdaLogGroup'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SaveCollectionNames}
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SaveCollectionNames}:*
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SaveCollectionNames}:*:*

  PeriodicEventRuleVPC:
    Type: 'AWS::Events::Rule'
    Condition: CreateMirroringSessionForECS
    Properties:
      Description: Generate an event periodically
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-'
          - PeriodicRuleVPC
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - SaveCollectionNames
            - Arn
          Id: !Ref SaveCollectionNames
      
  PeriodicEventPermissionVPC:
    Type: 'AWS::Lambda::Permission'
    Condition: CreateMirroringSessionForECS
    Properties:
      FunctionName: !GetAtt
        - SaveCollectionNames
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt
        - PeriodicEventRuleVPC
        - Arn

Outputs:
  successEniList:
    Description: Successfull ENI list
    Condition: CreateMirroringSessionForECS
    Value: !GetAtt
      - CustomSourceENIs
      - successEnis
  failedEniList:
    Description: Failed ENI list
    Condition: CreateMirroringSessionForECS
    Value: !GetAtt
      - CustomSourceENIs
      - failedEnis

