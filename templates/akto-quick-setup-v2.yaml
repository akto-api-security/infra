AWSTemplateFormatVersion: "2010-09-09"
Description:
  This template does a quick setup of Akto modules. It sets up Akto dashboard and mongo on a single ec2 instance. If you want a flexible setup, please
  contact support@akto.io.
Parameters:
  VpcId: 
    Type: AWS::EC2::VPC::Id
    Description: Enter VPC ID where Akto EC2 instances will be deployed.
    ConstraintDescription: must be an existing vpc
  KeyPair:
    Description: Select the key pair to connect to Akto EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description:
      Select a private subnetid where Akto EC2 instances will be deployed. This should be in the VPC being given by you.
    ConstraintDescription: must be an existing subnet
  UserEmail:
    Type: String
Mappings:
  RegionMap:
    "af-south-1":
      AMI: "ami-00588ff7d44f0b6e2"
    "eu-north-1":
      AMI: "ami-09b071757b03d4723"
    "ap-south-1":
      AMI: "ami-08e95f43e1c0e53b7"
    "eu-west-3":
      AMI: "ami-04589c41342e2613f"
    "eu-west-2":
      AMI: "ami-0dcd9e2a276abc0ac"
    "eu-south-1":
      AMI: "ami-05f2de069b1aa09be"
    "eu-west-1":
      AMI: "ami-009e0dd1847dddbcc"
    "ap-northeast-3":
      AMI: "ami-0dff76f9597d7da13"
    "ap-northeast-2":
      AMI: "ami-0740db9877d3fcc78"
    "me-south-1":
      AMI: "ami-0393be492a3e99039"
    "ap-northeast-1":
      AMI: "ami-00a7a10fe682e3f1a"
    "sa-east-1":
      AMI: "ami-03ec3eae43b2559fe"
    "ca-central-1":
      AMI: "ami-00afde4eccc142c5b"
    "ap-east-1":
      AMI: "ami-0bf0e38ae15ed6fc6"
    "ap-southeast-1":
      AMI: "ami-028b40a09a2f535c1"
    "ap-southeast-2":
      AMI: "ami-071f95d61daa0b2b1"
    "eu-central-1":
      AMI: "ami-05fc6266a1cbc7e4f"
    "ap-southeast-3":
      AMI: "ami-09b0fede0e885f913"
    "us-east-1":
      AMI: "ami-04f1f1eddf4671470"
    "us-east-2":
      AMI: "ami-0976edd9a2911640f"
    "us-west-1":
      AMI: "ami-06df515bb5632e627"
    "us-west-2":
      AMI: "ami-0754319c18d2d18bc"
Resources:
  ## Setting up mongo and dashboard
  AktoMongoSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable the ports Mongo and dashboard require (22, 27017, 8080)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: []
  AktoMongoLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: m5a.xlarge
        KeyName:
          Ref: KeyPair
        NetworkInterfaces:
          - SubnetId: !Ref PrivateSubnetId
            AssociatePublicIpAddress: "false"
            DeviceIndex: 0
            Groups: [!Ref AktoMongoSecurityGroup]
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: "true"
              VolumeSize: "50"
              Encrypted: true
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2    
        UserData:
          Fn::Base64:
            Fn::Join:
              - "\n"
              - - "#!/bin/bash -xe"
                - cd ~/akto/infra
                - git restore .
                - git pull
                - sudo systemctl start docker
                - sudo echo >> ~/akto/infra/docker.env
                - sudo echo AKTO_MONGO_CONN=mongodb://mongo:27017/admini >>
                  ~/akto/infra/docker.env
                - Fn::Sub: sudo echo EC2_KEY_PAIR='${KeyPair}' >> ~/akto/infra/docker.env
                - Fn::Sub: sudo echo OWNER_EMAIL='${UserEmail}' >> ~/akto/infra/docker.env
                - Fn::Sub: sudo echo EC2_SUBNET_ID='${PrivateSubnetId}' >> ~/akto/infra/docker.env
                - Fn::Sub: sudo echo AWS_REGION=${AWS::Region} >> ~/akto/infra/docker.env   
                - Fn::Sub: sudo echo AWS_ACCOUNT_ID=${AWS::AccountId} >> ~/akto/infra/docker.env            
                - Fn::Sub: sudo echo AWS_DEFAULT_REGION=${AWS::Region} >> ~/akto/infra/docker.env
                - Fn::Sub: sudo echo AKTO_DASHBOARD_STACK_NAME=${AWS::StackName} >> ~/akto/infra/docker.env
                - Fn::Sub: sudo echo AKTO_DASHBOARD_ROLE_NAME='AktoDashboardRole' >> ~/akto/infra/docker.env
                - Fn::Sub: sudo echo DEPLOYMENT_VERSION=V2 >> ~/akto/infra/docker.env
                - cd ~/akto/infra
                - docker-compose up -d --remove-orphans
                - cd /etc/cloud/cloud.cfg.d
                - touch cloud-config.cfg
                - echo "" > cloud-config.d
                - echo "#cloud-config" >> cloud-config.cfg
                - echo "cloud_final_modules:" >> cloud-config.cfg
                - echo "- [scripts-user, always]" >> cloud-config.cfg
                - Fn::Join:
                  - ''
                  - - sudo /opt/aws/bin/cfn-signal -s true
                    - "         --stack "
                    - Ref: AWS::StackName
                    - "         --resource AktoMongoInstance"
                    - "         --region "
                    - Ref: AWS::Region
  AktoMongoInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: Akto Mongo instance
      LaunchTemplate:
        LaunchTemplateId: !Ref AktoMongoLaunchTemplate
        Version: !GetAtt AktoMongoLaunchTemplate.LatestVersionNumber
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:    
        Timeout: PT10M
Outputs:
  AktoMongoConn:
    Value: !Join 
      - ''
      - - 'mongodb://'
        - !GetAtt 
          - AktoMongoInstance
          - PrivateIp
        - ':27017/admin'
    Description: MongoDB connection String
  InstanceId:
    Value: !Ref AktoMongoInstance
