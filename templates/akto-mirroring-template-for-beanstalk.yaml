AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template to configure traffic mirroring sessions on an Elastic Beanstalk Environment
Parameters:
  EBEnvironmentNames:
    Description: 'List of Elastic Beanstalk environment Names to configure traffic mirroring session to'
    Type: CommaDelimitedList
  InstancesPerEBEnvironment:
    Description: 'Number of instances to be mirrored per Beanstalk environment'
    Type: Number
    Default: 1

  MirroringSessionNumber:
    Description: 'Unique mirroring session number to be used for mirroring session'
    Type: String
    Default: '10'
  
  TargetENI:
    Description: 'ENI Id of target network interface'
    Type: String
    Default: ''

  TargetLB:
    Description: Target Loadbalancer ARN
    Type: String
    Default: ''

Conditions:
  CreateMirroringSession: !Not 
    - !Equals 
      - !Select 
        - 0
        - !Ref EBEnvironmentNames
      - ''

  CreatePeriodicMirroringSession: !Not 
    - !Equals 
      - !Select 
        - 0
        - !Ref EBEnvironmentNames
      - ''
  isTargetNLB: !Not
    - !Equals
      - !Ref TargetLB
      - ''

Resources:

  TrafficMirrorTarget:
    Type: AWS::EC2::TrafficMirrorTarget
    Properties:
      Description: Traffic Mirror target set to network interface of Akto EC2 instance
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref 'AWS::StackName'
              - '-'
              - Target
        - Key: Deployment
          Value: Akto-CloudFormation
      NetworkInterfaceId: !If 
        - isTargetNLB
        - !Ref AWS::NoValue
        - !Ref TargetENI
      NetworkLoadBalancerArn: !If 
        - isTargetNLB
        - !Ref TargetLB
        - !Ref AWS::NoValue

  EBTrafficMirrorFilter:
    Type: AWS::EC2::TrafficMirrorFilter
    Properties:
      Description: Traffic mirror filter for Target Groups
      NetworkServices:
        - amazon-dns
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref 'AWS::StackName'
              - '-'
              - 'Filter'
        - Key: Deployment
          Value: Akto-CloudFormation
  EBTrafficMirrorFilterRule:
    Type: AWS::EC2::TrafficMirrorFilterRule
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      SourceCidrBlock: "0.0.0.0/0"
      TrafficMirrorFilterId: !Ref EBTrafficMirrorFilter
      RuleNumber: 100
      RuleAction: "accept"
      Protocol: 6
      TrafficDirection: "ingress"

  CustomSourceENIs:
    Type: AWS::CloudFormation::CustomResource
    Condition: CreateMirroringSession
    Properties:
      ServiceToken: !GetAtt 
        - CreateMirrorSession
        - Arn
      EBEnvironmentNames: !Ref EBEnvironmentNames
      MirrorTarget: !Ref TrafficMirrorTarget
      MirrorFilter: !Ref EBTrafficMirrorFilter
      SampleSize: !Ref InstancesPerEBEnvironment
      TargetENI: !Ref TargetENI 
      TargetLB: !Ref TargetLB     
    DependsOn: LambdaLogGroup
  
  CreateMirrorSession:
    Type: AWS::Lambda::Function
    Condition: CreateMirroringSession
    Properties:
      Runtime: nodejs12.x
      Timeout: 60
      Role: !GetAtt 
        - LambdaBasicExecutionRole
        - Arn
      Handler: CreateMirroringSession/index.ElasticBeanstalkHandler
      Environment:
        Variables:
          EB_ENV_NAMES:  !Join 
            - ','
            - !Ref EBEnvironmentNames
          SAMPLE_SIZE: !Ref InstancesPerEBEnvironment
          
          TRAFFIC_MIRROR_SESSION_NUMBER: !Ref MirroringSessionNumber
          TRAFFIC_MIRROR_FILTER_ID: !Ref EBTrafficMirrorFilter
          TRAFFIC_MIRROR_TARGET_ID: !Ref TrafficMirrorTarget
          TARGET_ENI: !Ref TargetENI
          TARGET_LB: !Ref TargetLB
      
      Code:
        S3Bucket: aktotestbucket
        S3Key: CreateMirroringSession.zip
      Description: Auto create mirroring configuration for Elastic Beanstalk Environments
      TracingConfig:
        Mode: Active
    
  PeriodicEventRule:
    Type: AWS::Events::Rule
    Condition: CreatePeriodicMirroringSession
    Properties:
      Description: Generate an event periodically
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-'
          - PeriodicRule
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 
            - CreateMirrorSession
            - Arn
          Id: !Ref CreateMirrorSession
  
  PeriodicEventPermission:

    Type: AWS::Lambda::Permission
    Condition: CreatePeriodicMirroringSession
    Properties:
      FunctionName: !GetAtt 
        - CreateMirrorSession
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt 
        - PeriodicEventRule
        - Arn
   
  LambdaLogPermissions:
    Type: AWS::IAM::Policy
    Condition: CreateMirroringSession
    Properties:
      Roles:
        - !Ref LambdaBasicExecutionRole
      PolicyName: !Sub '${AWS::Region}-LambdaLogGroup'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CreateMirrorSession}
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CreateMirrorSession}:*
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CreateMirrorSession}:*:*

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateMirroringSession 
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${CreateMirrorSession}'
      RetentionInDays: 7

  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreateMirroringSession
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: EBTrafficMirrorSession
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeTrafficMirrorSessions'
                  - 'ec2:Describeinstances'
                  - 'ec2:DescribeTrafficMirrorFilters'
                  - 'ec2:DeleteTrafficMirrorFilterRule'
                  - 'ec2:CreateTrafficMirrorFilterRule'
                  - 'elbv2:DescribeLoadBalancers'
                  - 'elasticbeanstalk:DescribeEnvironmentResources'
                  - 'autoscaling:DescribeAutoScalingGroups'
                Resource: '*'

              - Effect: Allow
                Action:
                  - 'ec2:CreateTrafficMirrorSession'
                Resource:
                  - 'arn:aws:ec2:*:*:traffic-mirror-session/*'
                  - 'arn:aws:ec2:*:*:network-interface/*'
                  - !Join 
                    - ''
                    - - 'arn:aws:ec2:*:*:traffic-mirror-target/'
                      - !Ref TrafficMirrorTarget
                  - 'arn:aws:ec2:*:*:traffic-mirror-filter/*'

              - Effect: Allow
                Action: 
                  - 'ec2:DeleteTrafficMirrorSession'
                Resource:
                  - 'arn:aws:ec2:*:*:traffic-mirror-filter/*'

  LambdaVPCAccessRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateMirroringSession
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaBasicAccessVPCPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeInstances'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:AttachNetworkInterface'
                Resource: '*'
  InvokeSaveCollection:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:  SaveCollectionNames
    Properties:
      ServiceToken: !GetAtt SaveCollectionNames.Arn
  LambdaSecurityGroupVPC:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !GetAtt 
        - CustomSourceENIs
        - VpcId
      GroupDescription: "Security group is required to create a lambda inside a VPC"
      
      SecurityGroupEgress: 
        - IpProtocol: "tcp"
          FromPort: 9092
          ToPort: 9092
          CidrIp: "0.0.0.0/0"
  SaveCollectionNames:
    Type: 'AWS::Lambda::Function'
    Condition: CreateMirroringSession
    Properties:
      Runtime: nodejs12.x
      Timeout: 60
      Role: !GetAtt
        - LambdaVPCAccessRole
        - Arn
      Handler: nodejs/index.handler
      VpcConfig:
        SecurityGroupIds: 
          - !GetAtt 
            - LambdaSecurityGroupVPC 
            - GroupId
        SubnetIds: !GetAtt 
          - CustomSourceENIs
          - SubnetId
      Environment:
        Variables:
          PRIVATE_IP: !GetAtt
            - CustomSourceENIs
            - kafkaIp
          SUCCESS_ENIS: !GetAtt
            - CustomSourceENIs
            - successEnis
      Code:
        S3Bucket: !Sub 'akto-setup-${AWS::Region}'
        S3Key: 'templates/mirroring-collections.zip'
      Description: Send collection name to id mapping to Akto modules
      TracingConfig:
        Mode: Active
  LambdaLogGroupVPC:
    Type: 'AWS::Logs::LogGroup'
    Condition: CreateMirroringSession
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SaveCollectionNames}'
      RetentionInDays: 7
  LambdaLogPermissionsVPC:
    Type: 'AWS::IAM::Policy'
    Condition: CreateMirroringSession
    Properties:
      Roles:
        - !Ref LambdaVPCAccessRole
      PolicyName: !Sub '${AWS::Region}-LambdaLogGroup'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SaveCollectionNames}
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SaveCollectionNames}:*
              - !Sub >-
                arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SaveCollectionNames}:*:*
  PeriodicEventRuleVPC:
    Type: 'AWS::Events::Rule'
    Condition: CreateMirroringSession
    Properties:
      Description: Generate an event periodically
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-'
          - PeriodicRuleVPC
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - SaveCollectionNames
            - Arn
          Id: !Ref SaveCollectionNames
      
  PeriodicEventPermissionVPC:
    Type: 'AWS::Lambda::Permission'
    Condition: CreateMirroringSession
    Properties:
      FunctionName: !GetAtt
        - SaveCollectionNames
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt
        - PeriodicEventRuleVPC
        - Arn
Outputs:
  successEniList:
    Description: Successful ENI list
    Condition: CreateMirroringSession
    Value: !GetAtt 
      - CustomSourceENIs
      - successEnis
  failedEniList:
    Description: Failed ENI List
    Condition: CreateMirroringSession
    Value: !GetAtt 
      - CustomSourceENIs
      - failedEnis
  





      


