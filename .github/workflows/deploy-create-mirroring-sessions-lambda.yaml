# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ feature/quick-setup ]
    paths: ['lambdas/create-mirroring-sessions/**']
  pull_request:
    branches: [ feature/quick-setup ]
    paths: ['lambdas/create-mirroring-sessions/**']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      Environment:
        required: true
        type: choice
        options:
          - prod
          - staging
        default: staging  
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    #Set working-directory for build job
    defaults:
      run:
        working-directory: lambdas/create-mirroring-sessions

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          architecture: x64

      - uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Install modules
        run: npm install
      - name: Configure AWS credentials
        if: ${{ github.event.inputs.Environment == 'staging' || github.event.inputs.Environment == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Make zip file
        env:
          ZIP_NAME: ${{ github.event.inputs.Environment == 'staging' && '-staging' || '' }}
        run: |
          mkdir code
          cp index.js ./code
          cp package.json ./code
          cd code
          npm install
          zip -r create-mirror-session${ZIP_NAME}.zip ./
      - name: Copy zip file to S3
        if: ${{ github.event.inputs.Environment == 'staging' || github.event.inputs.Environment == 'prod' }}
        run: |
          cd code
          aws configure set default.s3.multipart_threshold 64MB
          aws s3 cp *.zip s3://akto-setup-us-east-1/templates/ --acl bucket-owner-full-control --region us-east-1
          aws s3 cp *.zip s3://akto-setup-us-east-2/templates/ --acl bucket-owner-full-control --region us-east-2
          aws s3 cp *.zip s3://akto-setup-us-west-1/templates/ --acl bucket-owner-full-control --region us-west-1
          aws s3 cp *.zip s3://akto-setup-us-west-2/templates/ --acl bucket-owner-full-control --region us-west-2
          aws s3 cp *.zip s3://akto-setup-ap-east-1/templates/ --acl bucket-owner-full-control --region ap-east-1
          aws s3 cp *.zip s3://akto-setup-ap-south-1/templates/ --acl bucket-owner-full-control --region ap-south-1
          aws s3 cp *.zip s3://akto-setup-ap-northeast-2/templates/ --acl bucket-owner-full-control --region ap-northeast-2
          aws s3 cp *.zip s3://akto-setup-ap-southeast-1/templates/ --acl bucket-owner-full-control --region ap-southeast-1
          aws s3 cp *.zip s3://akto-setup-ap-southeast-2/templates/ --acl bucket-owner-full-control --region ap-southeast-2
          aws s3 cp *.zip s3://akto-setup-ap-northeast-1/templates/ --acl bucket-owner-full-control --region ap-northeast-1
          aws s3 cp *.zip s3://akto-setup-ca-central-1/templates/ --acl bucket-owner-full-control --region ca-central-1
          aws s3 cp *.zip s3://akto-setup-eu-central-1/templates/ --acl bucket-owner-full-control --region eu-central-1
          aws s3 cp *.zip s3://akto-setup-eu-west-1/templates/ --acl bucket-owner-full-control --region eu-west-1
          aws s3 cp *.zip s3://akto-setup-eu-west-2/templates/ --acl bucket-owner-full-control --region eu-west-2
          aws s3 cp *.zip s3://akto-setup-eu-west-3/templates/ --acl bucket-owner-full-control --region eu-west-3
          aws s3 cp *.zip s3://akto-setup-eu-north-1/templates/ --acl bucket-owner-full-control --region eu-north-1
          aws s3 cp *.zip s3://akto-setup-me-south-1/templates/ --acl bucket-owner-full-control --region me-south-1
          aws s3 cp *.zip s3://akto-setup-sa-east-1/templates/ --acl bucket-owner-full-control --region sa-east-1